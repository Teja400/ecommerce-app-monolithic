# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#apache-maven-with-a-settings-path

name: Maven Package

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    # Step 1: Checkout the code
    - name: Checkout code
      uses: actions/checkout@v4
    
    # Step 2: Set up Java (for Maven build)
    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file
    
    # Step 3: Build the application with Maven
    - name: Build with Maven
      run: mvn clean package
    
    # Step 4: Set up Docker
    - name: Set up Docker
      uses: docker/setup-buildx-action@v2
      
    # Step 5: Build the Docker image
    - name: Build Docker Image
      run: docker build -t tag-name:v1.0.0 -f Dockerfile .


    # Step 6: Log in to Docker Hub or registry
    - name: Log in to Docker Registry
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    # Step 7: Push the Docker image
    - name: Push Docker Image
      run: docker push teja827/ecom:v1.0.0
  
  deploy:
    runs-on: ubuntu-latest
    needs: build # Ensure this runs after the build job

    steps:
      # Step 9: Deploy the application
      - name: Deploy to Server
        run: |
          docker pull teja827/ecommerce-app:latest
          docker stop ecommerce-app || true
          docker rm ecommerce-app || true
          docker run -d --name ecommerce-app -p 8080:8080 your-docker-registry/ecommerce-app:latest
          EOF
